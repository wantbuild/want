local want = import "@want";
local alpine = import "recipes/alpine/alpine.libsonnet";
local linux = import "recipes/linux/linux.libsonnet";

local dist = want.importURL(
    url = "https://github.com/rust-lang/mdBook/releases/download/v0.4.43/mdbook-v0.4.43-x86_64-unknown-linux-musl.tar.gz",
    algo = "SHA256",
    hash = "3058914071a6f22dbd1b8ea734a96d8e86489743ae0bc8d6bbd9e923f191b038",
    transforms = ["ungzip", "untar"],
);

local mdbookExec = want.pick(dist, "mdbook");

local initscript = want.blob(|||
    set -ve

    /usr/bin/mdbook build /input -d /output

    reboot -f
|||);

local bookToml = want.blob(|||
    [book]
    title = "Want Build System"
|||);

// https://rust-lang.github.io/mdBook/format/summary.html
local summaryMd = want.blob(|||
    # Summary

    [Introduction](00_Introduction.md)

    - [Using Want](10_Using_Want.md)
    - [Concepts](20_Concepts.md)
        - [Blobs, Trees, and Refs](21_Blobs_Trees_Refs.md)
        - [Tasks & Jobs](22_Tasks_Jobs.md)
    - [Build Configuration](30_Build_Configuration.md)
        - [Module Files](31_Module_Files.md)
        - [Expression Files](32_Expression_Files.md)
        - [Statement Files](33_Statement_Files.md)
        - [Core Library](34_Core_Library.md)
|||);

local rootfs = want.pass([
    want.input("", alpine.rootfs(alpine.ARCH_AMD64)),
    want.input("initscript", initscript),
    want.input("/usr/bin", dist),
    want.input("/input/book.toml", bookToml),
    want.input("/input/src", want.selectDir(DERIVED, "doc")),
    want.input("/input/src/SUMMARY.md", summaryMd),
    want.input("/output", want.tree()),
]);

linux.runVM(1, 1e9, linux.bzImage, rootfs, init="/bin/sh", args=["initscript", ""], output=want.prefix("output"))